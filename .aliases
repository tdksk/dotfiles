alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

case $OSTYPE in
    # OS X
    darwin*)
        alias ls='ls -hG'
        ;;
    # Linux
    linux*)
        alias ls='ls -h --show-control-chars --color=auto'
        ;;
esac

alias la='ls -laF'

h() {
    if [ "$1" ]; then history "$1"; else history 30; fi
}

alias tls='tmux ls'
alias b='bundle'
alias be='bundle exec'
alias rs='bundle exec rails server'
alias rc='bundle exec rails console'
alias fs='bundle exec foreman start'
alias t='tig'

e() {
    if [ $# -eq 0 ]; then
        emacs
    else
        emacsclient -n $*
    fi
}

tm() {
    if [[ ( $OSTYPE == darwin* ) && ( -x $(which reattach-to-user-namespace 2>/dev/null) ) ]]; then
        # on OS X force tmux's default command to spawn a shell in the user's namespace
        # https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
        tweaked_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))

        tmux attach || tmux -f <(echo "$tweaked_config") new-session
    else
        tmux attach || tmux new-session
    fi
}

# git
alias g='git'
alias s='git status -sb'
alias ad='git add'
alias aa='git add -A :/ && s'
alias co='git checkout'
alias ci='git commit'
alias br='git branch'
alias ba='git branch -a'
alias rcontinue='git rebase --continue'
alias rabort='git rebase --abort'
alias st='git stash save'
alias stl='git stash list'
alias sm='git submodule'
alias sma='git submodule add'
alias smup='git submodule update --init --recursive'
alias smpa='git submodule foreach "git checkout master; git pull"'
alias d='git diff'
alias c='git diff --cached'
alias l='git l'
alias tree='git tree'
alias gg='git grep -I -n -i --heading --break -e'
alias gra='git status | grep deleted: | awk "{print \$3}" | xargs git rm'

m() {
    git commit -m "$*"
}

am() {
    if [ $# -eq 0 ]; then
        git commit --amend -C HEAD
    else
        git commit --amend -m "$*"
    fi
}

ri() {
    if [ $# -eq 1 ]; then
        git rebase -i HEAD~$1
    else
        git rebase -i
    fi
}

stp() {
    if [ $# -eq 1 ]; then
        git stash pop stash@{$1}
    else
        git stash pop
    fi
}

u() {
    cd "$(git rev-parse --show-toplevel)"
}

# git-submodule-rm
smrm() {
    if [ -z "$1" ]; then
        echo "Usage: $0 submodule-path"
        exit
    fi
    SUBMODULE_PATH="$1"

    if [ ! -d ".git" ]; then
        echo "You need to run this command from the toplevel of the working tree."
        exit 1
    fi

    # Remove [submodule ...] section from local .git/config
    git config --local --remove-section "submodule.${SUBMODULE_PATH}"

    # Remove submodule from .gitmodule
    git config --file=.gitmodules --remove-section "submodule.${SUBMODULE_PATH}"
    git add .gitmodules

    # Remove submodule path
    git rm -r "${SUBMODULE_PATH}"
}

# git-undo
undo() {
    local back="^"

    case "$1" in
        -h|--hard)
            test $2 -gt 1 > /dev/null 2>&1 && back="~$2"
            git reset --hard HEAD$back && return 0;
            ;;
        -s|--soft)
            test $2 -gt 1 > /dev/null 2>&1 && back="~$2"
            ;;
        *)
            test $1 -gt 1 > /dev/null 2>&1 && back="~$1"
            ;;
    esac

    git reset --soft HEAD$back
    git reset
}

# git-update
update() {
    local branch="master"
    if [ "$1" ]; then branch="$1"; fi
    git stash save -u && git checkout $branch && git pull && git checkout - && git rebase $branch && git stash pop
}

# git-replace
git-replace() {
    git grep -l $1 | xargs sed -i '' -e "s/$1/$2/g"
}

# git-co-pr
copr() {
    if [ -z "$1" ]; then
        echo "Usage: $0 id"
        return 1
    fi
    local id="$1"
    git fetch -fu ${2:-origin} pull/$id/head:pull/$id
    git checkout pull/$id
}

pr-clean() {
    git for-each-ref refs/heads/pull/* --format='%(refname)' | \
        while read ref; do git branch -D ${ref#refs/heads/}; done
}

# git-browse-pr
bpr() {
    git show $(ruby -e 'print (File.readlines(ARGV[0]) & File.readlines(ARGV[1])).last' <(git rev-list --ancestry-path $1..master) <(git rev-list --first-parent $1..master) | tail -1) | grep 'pull request' | ruby -ne 'id = $_.scan(/#\d+/).first.sub("#", ""); `hub browse -- pull/#{id}`'
}

# peco
p() { peco | while read LINE; do $@ $LINE; done }
peco-pkill() {
    for pid in `ps aux | peco | awk '{ print $2 }'`
    do
        kill $pid
        echo "Killed ${pid}"
    done
}
alias o='git ls-files | p open'
alias pk='peco-pkill'

# tmux
tssh() {
    hosts=("$@")
    first="true"
    for host in "${hosts[@]}"; do
        if [ $first = "true" ]; then
            tmux new-window "ssh $host"
            first="false"
        else
            tmux split-window "ssh $host"
            tmux select-layout tiled > /dev/null
        fi
    done
    tmux select-pane -t 0
    tmux set-window-option synchronize-panes on > /dev/null
}

# Util
alias csview='column -s, -t | less -R'

videotogif() {
    input="$1"
    test "$input" || input="pipe:0"

    ffmpeg -i "$input" -r 10 -f image2pipe -vcodec ppm - \
        | convert -layers Optimize - gif:- \
        | gifsicle -O3 --multifile -
}

# OS X
alias f='open .'
cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]
    then
        cd "$target"
        pwd
    else
        echo 'No Finder window found' >&2
    fi
}

# Xcode
alias ios='open /Applications/Xcode.app/Contents/Developer/Applications/iOS\ Simulator.app'
alias clean-derived-data='rm -rf ~/Library/Developer/Xcode/DerivedData'
